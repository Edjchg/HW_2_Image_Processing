## -*- texinfo -*-
## @deftypefn  {} {} dummy()
##
## This is a dummy function documentation. This file have a lot functions
## and each one have a little documentation. This text is to avoid a warning when
## install this file as part of package.
## @end deftypefn
##
## Set the graphics toolkit and force read this file as script file (not a function file).
##
graphics_toolkit qt;
##


##
##
## Begin callbacks definitions 
##

## @deftypefn  {} {} btn_load_img_doIt (@var{src}, @var{data}, @var{main})
##
## Define a callback for default action of btn_load_img control.
##
## @end deftypefn
function btn_load_img_doIt(src, data, main)

% This code will be executed when user click the button control.
% As default, all events are deactivated, to activate must set the
% propertie 'generateCallback' from the properties editor

[file,path]=uigetfile(); %Ventana de dialogo para seleccionar la imagen

%Variable global para la imagen de entrada
global A;

%Comprueba que el ui consiguio un archivo
if size(file,2)>1 && size(path,2)>1
  text=fullfile(path, file); %Direccion donde se encuentra la imagen
%Lectura y mostrado de la imagen de entrada
  A=imread(text);
  axes(main.img_input)
  imshow(A)
%Reseteo de mensajes
  set(main.btn_process,'foregroundcolor',[0.0 0.0 0.0]);
  set(main.btn_process,'string','Limpiar');
  set(main.lbl_output,'string','Imagen Salida');
endif
end

## @deftypefn  {} {} btn_process_doIt (@var{src}, @var{data}, @var{main})
##
## Define a callback for default action of btn_process control.
##
## @end deftypefn
function btn_process_doIt(src, data, main)

% This code will be executed when user click the button control.
% As default, all events are deactivated, to activate must set the
% propertie 'generateCallback' from the properties editor

%Variable global para la imagen de entrada
global A;
global B;

%Comprobacion que existe una imagen
if sum(size(A))==0
%Mensaje indicando que no existe la imagen
  set(main.btn_process,'foregroundcolor',[1.0 0.0 0.0]);
  set(main.btn_process,'string','¡Cargue Imagen!');
else
%Mensaje que indica el inicio del procesamiento
  set(main.btn_process,'foregroundcolor',[0.0 0.0 1.0]);
  set(main.btn_process,'string','Procesando...');
%Desabilitacion de botones para evitar problemas
  set(main.btn_process,'enable','off');
  set(main.btn_load_img,'enable','off');
  set(main.combobox_algo,'enable','off');
  set(main.btn_save,'enable','off');
%Se consigue el tipo de filtro seleccionado del combobox
  option=get(main.combobox_algo,'value');
%La funcion de filtrado implementado en Octave
%Se selecciona el algoritmo
  if option==1
    B=filt_mediana(A);
    set(main.lbl_output,'string','Imagen Filtro Mediana');
  elseif option==2
    B=fast_med(A);
    set(main.lbl_output,'string','Imagen Fast Median Filter');
  elseif option==3
    B=impr_med(A);
    set(main.lbl_output,'string','Imagen IAMFA-I');
  else
    B=A;
    set(main.lbl_output,'string','Imagen Entrada: Error');
  endif
%Se muestra la imagen en su respectivo campo
  axes(main.img_output)
  imshow(B)
%Mensaje que indica el fin del procesamiento
  set(main.btn_process,'foregroundcolor',[0.0 0.0 0.0]);
  set(main.btn_process,'string','Limpiar');
%Se habilidan los botones
  set(main.btn_process,'enable','on');
  set(main.btn_load_img,'enable','on');
  set(main.combobox_algo,'enable','on');
  set(main.btn_save,'enable','on');
endif
end

## @deftypefn  {} {} btn_save_doIt (@var{src}, @var{data}, @var{main})
##
## Define a callback for default action of btn_save control.
##
## @end deftypefn
function btn_save_doIt(src, data, main)

% This code will be executed when user click the button control.
% As default, all events are deactivated, to activate must set the
% propertie 'generateCallback' from the properties editor

%Variable global de imagen de salida
global B;

%Consigue el archivo de salida
[file,path]=uiputfile({"*.gif;*.png;*.jpg", "Supported Picture Formats"});

%Comprueba que se selecciono un archivo
if size(file,2)>1 && size(path,2)>1
  text=fullfile(path,file); %Direccion donde se encuentra la imagen
%Escribe la imagen de salida
  imwrite(B,text);
endif

end

## @deftypefn  {} {} btn_help_doIt (@var{src}, @var{data}, @var{main})
##
## Define a callback for default action of btn_help control.
##
## @end deftypefn
function btn_help_doIt(src, data, main)

% This code will be executed when user click the button control.
% As default, all events are deactivated, to activate must set the
% propertie 'generateCallback' from the properties editor


end

 
## @deftypefn  {} {@var{ret} = } show_main()
##
## Create windows controls over a figure, link controls with callbacks and return 
## a window struct representation.
##
## @end deftypefn
function ret = show_main()
  _scrSize = get(0, "screensize");
  _xPos = (_scrSize(3) - 722)/2;
  _yPos = (_scrSize(4) - 454)/2;
   main = figure ( ... 
	'Color', [0.941 0.941 0.941], ...
	'Position', [_xPos _yPos 722 454], ...
	'resize', 'off', ...
	'windowstyle', 'normal', ...
	'MenuBar', 'none');
	 set(main, 'visible', 'off');
  btn_load_img = uicontrol( ...
	'parent',main, ... 
	'Style','pushbutton', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.941 0.941 0.941], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Comic Sans MS', ... 
	'FontSize', 10, 'FontUnits', 'points', ... 
	'FontWeight', 'bold', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [15 9 108 35], ... 
	'String', 'Cargar Imagen', ... 
	'TooltipString', '');
  btn_process = uicontrol( ...
	'parent',main, ... 
	'Style','pushbutton', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.941 0.941 0.941], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Comic Sans MS', ... 
	'FontSize', 10, 'FontUnits', 'points', ... 
	'FontWeight', 'bold', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [150 9 108 35], ... 
	'String', 'Limpiar', ... 
	'TooltipString', '');
  btn_save = uicontrol( ...
	'parent',main, ... 
	'Style','pushbutton', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.941 0.941 0.941], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Comic Sans MS', ... 
	'FontSize', 10, 'FontUnits', 'points', ... 
	'FontWeight', 'bold', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [594 9 114 35], ... 
	'String', 'Guardar Imagen', ... 
	'TooltipString', '');
  combobox_algo = uicontrol( ...
	'parent',main, ... 
	'Style','popupmenu', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.941 0.941 0.941], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Comic Sans MS', ... 
	'FontSize', 10, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [420 14 134 25], ... 
	'String', 'Mediana|Fast Median Filter Approximation|IAMFA-I', ... 
	'TooltipString', '');
  Label_3 = uicontrol( ...
	'parent',main, ... 
	'Style','text', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.941 0.941 0.941], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Comic Sans MS', ... 
	'FontSize', 10, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'HorizontalAlignment', 'left', ... 
	'Position', [285 16 119 18], ... 
	'String', 'Algoritmo utilizado:', ... 
	'TooltipString', '');
  img_input = axes( ...
	'Units', 'pixels', ... 
	'parent',main, ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Arial', ... 
	'FontSize', 10, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'Position', [15 76 331 308]);
  img_output = axes( ...
	'Units', 'pixels', ... 
	'parent',main, ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Arial', ... 
	'FontSize', 10, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'Position', [375 76 331 308]);
  Label_4 = uicontrol( ...
	'parent',main, ... 
	'Style','text', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.941 0.941 0.941], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Comic Sans MS', ... 
	'FontSize', 16, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'HorizontalAlignment', 'center', ... 
	'Position', [115 395 156 29], ... 
	'String', 'Imagen Entrada', ... 
	'TooltipString', '');
  lbl_output = uicontrol( ...
	'parent',main, ... 
	'Style','text', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.941 0.941 0.941], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Comic Sans MS', ... 
	'FontSize', 16, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'HorizontalAlignment', 'center', ... 
	'Position', [375 395 331 29], ... 
	'String', 'Imagen Salida', ... 
	'TooltipString', '');
  btn_help = uicontrol( ...
	'parent',main, ... 
	'Style','pushbutton', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.941 0.941 0.941], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Comic Sans MS', ... 
	'FontSize', 10, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [670 425 52 29], ... 
	'String', 'Ayuda', ... 
	'TooltipString', '');

  main = struct( ...
      'figure', main, ...
      'btn_load_img', btn_load_img, ...
      'btn_process', btn_process, ...
      'btn_save', btn_save, ...
      'combobox_algo', combobox_algo, ...
      'Label_3', Label_3, ...
      'img_input', img_input, ...
      'img_output', img_output, ...
      'Label_4', Label_4, ...
      'lbl_output', lbl_output, ...
      'btn_help', btn_help);


  set (btn_load_img, 'callback', {@btn_load_img_doIt, main});
  set (btn_process, 'callback', {@btn_process_doIt, main});
  set (btn_save, 'callback', {@btn_save_doIt, main});
  set (btn_help, 'callback', {@btn_help_doIt, main});
  dlg = struct(main);

%
% The source code writed here will be executed when
% windows load. Work like 'onLoad' event of other languages.
%

pkg load image
  set(main.figure, 'visible', 'on');
  ret = main;
end

